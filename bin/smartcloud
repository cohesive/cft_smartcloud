#!/usr/bin/env ruby

require File.join(File.dirname(__FILE__), '../lib/smartcloud')
require 'pp'
require 'slop'

if !ENV['SMARTCLOUD_USERNAME'] || !ENV['SMARTCLOUD_PASSWORD']
  puts "Please set environment variables SMARTCLOUD_PASSWORD and SMARTCLOUD_USERNAME in your environment."
  exit(1)
end

# These are the options we can pass in
opts = Slop.new do
  on :u, :username, :optional => true
  on :p, :password, :optional => true
  on :r, :retries, :optional => true
  on :s, :sleep_interval, :optional => true
  on :U, :api_url, :optional => true
  on :d, :debug, :optional => true
end

# These are the actual commands appearing after the script name,
# such as "smartcloud display_instances ... "
commands = []
opts.parse do |nonarg|
  commands << nonarg
end

@sc = IBMSmartCloud.new(opts)

if commands.size == 1
  if commands[0] == 'help'
    puts "#{opts.help}\n\nFunctions:\n"
  end
  @cmd=commands[0]
elsif commands.size == 2
  @cmd="#{commands[0]}('#{commands[1]}')"
elsif commands.size == 0 
  puts %{
  #{opts.help}
  
  Usage: 
  smartcloud help
  smartcloud help [command]
  smartcloud [command]
  smartcloud [command] [argument]

  Examples:
  smartcloud "delete_instance(12345)"
  smartcloud delete_instance 12345
  smartcloud delete_instances 12345 12346 12347
  smartcloud "delete_instances(12345,12346,12347)"
  smartcloud display_instances
}
  exit(0)
else
  @cmd="#{commands[0]}(#{commands[1..-1].map {|item| "'#{item}'"}.join(',')})"
end

  # allows us to send arbitrary commands like
  # smartcloud username password describe_instance("122345")
  result = eval("@sc.#{@cmd}")

  if result == true || result.nil?
    # do nothing, the command already logged
  else
    if result.is_a?(String)
      puts result
    else
      puts result.pretty_inspect
    end
  end
