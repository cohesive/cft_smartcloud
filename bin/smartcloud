#!/usr/bin/env ruby

require File.join(File.dirname(__FILE__), '../lib/smartcloud')
require 'pp'
require 'slop'

if !ENV['SMARTCLOUD_USERNAME'] || !ENV['SMARTCLOUD_PASSWORD']
  puts "Please set environment variables SMARTCLOUD_PASSWORD and SMARTCLOUD_USERNAME in your environment."
  exit(1)
end

# These are the options we can pass in
opts = Slop.new do
  on :u, :username=, :optional => true
  on :p, :password=, :optional => true
  on :r, :retries=,  "How many retries if the server is down"
  on :s, :sleep_interval=,  "How long to sleep between retries (s)"
  on :U, :api_url=,  "URL of api endpoint"
  on :d, :debug,  "Enable debug logging"
  on :R, :simulated_response_file=, "Pass in a file containing the response (do not hit cloud)"
  on :S, :save_response=, "Save the response (supply filename) as xml, for later use with -R response file"
end

# These are the actual commands appearing after the script name,
# such as "smartcloud display_instances ... "
commands = []
opts.parse do |nonarg|
  commands << nonarg
end
@sc = IBMSmartCloud.new(opts)

if commands.size == 1
  if commands[0] == 'help'
    puts "#{opts.help}\n\n"
  end
elsif commands.size == 0 
  puts %{
  #{opts.help}
  
  Usage: 
  smartcloud help
  smartcloud help [command]
  smartcloud [command]
  smartcloud [command] [argument]

  Examples:
  smartcloud "delete_instance(12345)"
  smartcloud delete_instance 12345
  smartcloud delete_instances 12345 12346 12347
  smartcloud display_instances
  smartcloud display_images name="Red Hat"
}
  exit(0)
end

# parse out foo=bar values and turn them into a hash
params=[]
param_hash={}
commands[1..-1].each do |item| 
  if item =~ /=/
    key,val = item.split('=')
    param_hash[key]=val
  else
    params << item
  end
end
params = params.map {|param| "'#{param}'" }.join(',')

method_invocation = if params.empty? && param_hash.empty?
  commands[0]
elsif !params.empty? && param_hash.empty?
  "#{commands[0]}(#{params})"
elsif params.empty? && !param_hash.empty?
  "#{commands[0]}(#{param_hash.inspect})"
else
  "#{commands[0]}(#{params}, #{param_hash.inspect})"
end

puts "Invoking: #{method_invocation}"
  # allows us to send arbitrary commands like
  # smartcloud username password describe_instance("122345")
  begin
    result = eval("@sc.#{method_invocation}")

  rescue ArgumentError => e
    puts e.message
    puts "\nPlease use the following command for more information:\nsmartcloud help #{commands[0]}\n\n"
  end

  if result == true || result.nil?
    # do nothing, the command already logged
  else
    if result.is_a?(String)
      puts result
    else
      puts result.pretty_inspect
    end
  end
